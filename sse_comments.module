<?php

/**
 * Implements hook_init().
 */
function sse_comments_init() {
  drupal_add_js(drupal_get_path('module', 'sse_comments'). '/js/sse_comments.js');
}


/**
 * Implements hook_theme().
 */
function sse_comments_theme($existing, $type, $theme, $path) {
  return array(
    'sse_comments_comment' => array(
      'variables' => array(
        'vars' => NULL,
      ),
    ),

    'sse_comments_comments' => array(
      'variables' => array(
        'vars' => NULL,
      ),
    ),

  );
}

/**
 * Implements hook_node_view().
 */
function sse_comments_node_view($node, $view_mode, $langcode) {
  if ($node->comment != 0) {
   // $node->content['comments'][0]['#markup'] = theme('sse_comments_comments', array('vars' => array('nid' => $node->nid)));
  }
  //print_r($node->content); die();
}


/**
 * Theme function for comment.
 * @param $vars
 */
function theme_sse_comments_comment($vars) {
  $body = $vars['vars']['comment'];
  $cid = $vars['vars']['cid'];
  $uid = $vars['vars']['uid'];
  $user = user_load($uid);
  $html = '<div class="comment_item" cid="' . $cid . '">';
  $html .= '<div class="comment_user">';
  $html .= l('@' . $user->name, 'user/' . $uid);
  $html .= '</div>';
  $html .= $body;
  $html .= '</div>';

  return $html;
}

/**
 * Theme function for comments.
 * @param $vars
 */
function theme_sse_comments_comments($vars) {

  $nid = $vars['vars']['nid'];
  $comments = array();
  $comments = sse_comments_check($nid);

  $html_comment = '';

  $comment_form = drupal_get_form('sse_comments_form_' . $nid, array('nid' => $nid));
  $html_comment .= drupal_render($comment_form);
  $comment_last_created = reset($comments)['created'];

  $sess_created = $_SESSION['last_created_comment_all'] ? $_SESSION['last_created_comment_all'] : 0;
  $_SESSION['last_created_comment_all'] = ($sess_created < $comment_last_created) ? $comment_last_created : $sess_created;

  $html_comment .= '<div class="node_comments_wrap" nid="' . $nid . '">';
  foreach ($comments as $cid => $comment) {
    $html_comment .= '<div class="comment-' . $cid . '" cid="' . $cid . '">';
    $html_comment .= theme('sse_comments_comment', array('vars' => array('cid' => $cid, 'comment' => $comment['body'], 'uid' => $comment['uid'])));
    $html_comment .='</div>';
  }
  $html_comment .= '</div>';

  return $html_comment;
}

/**
 * Implements hook_menu().
 */
function sse_comments_menu() {

  $items['check_comments/%'] = array(
    'title' => '',
    'page callback' => 'sse_comments_check',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    //'file' => ,
  );

  $items['check_new_comments/%'] = array(
    'title' => '',
    'page callback' => 'sse_comments_check_new_comments',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Callback for heck_comments.
 */
function sse_comments_check($nid, $last_created = NULL) {
  $query = db_select('comment', 'c');
  $query->innerJoin('field_data_comment_body', 'cb', 'c.cid = cb.entity_id');
  $query->fields('cb', array('comment_body_value', 'entity_id'));
  $query->fields('c', array('uid', 'created', 'nid'));
  if ($nid != 'all') {
    $query->condition('c.nid', $nid);
  }
  if ($last_created) {
    $query->condition('c.created', $last_created, '>');
  }
  $query->orderBy('c.created', 'DESC');
  $result = $query->execute();
  $comments = array();
  foreach ($result as $comment) {
    $comments[$comment->entity_id]['nid'] = $comment->nid;
    $comments[$comment->entity_id]['created'] = $comment->created;
    $comments[$comment->entity_id]['uid'] = $comment->uid;
    $comments[$comment->entity_id]['body'] = $comment->comment_body_value;
  }

  return $comments;
}

/**
 * Check new comments for sse.
 * @param $nid
 * @param $last_created
 */
function sse_comments_check_new_comments($nid) {
  drupal_add_http_header('Content-Type', 'text/event-stream; charset=utf-8');
  drupal_add_http_header('Cache-Control', 'no-cache');
  drupal_add_http_header('Connection', 'Keep-Alive');
  //drupal_add_library('system', 'drupal.ajax');
  $last_created = $_SESSION['last_created_comment_' . $nid];
  $comments = sse_comments_check($nid, $last_created);
  print ":" . str_repeat(" ", 2048) . "\n"; // 2 kB padding for IE
  print "retry: 7000\n";

  if (!empty($comments)) {
    $comment_last_created = reset($comments)['created'];
    if ($_SESSION['last_created_comment_' . $nid] != $comment_last_created) {
      $_SESSION['last_created_comment_' . $nid] = $comment_last_created;
    }
    foreach($comments as $cid => $comment) {
      print "id: " . $last_created . PHP_EOL;
      print "event: comment\n";
      print "retry: 7000\n";
      $html_comment = '<div class="comment-' . $cid . '" cid="' . $cid . '">';
      $html_comment .= theme('sse_comments_comment', array('vars' => array('cid' => $cid, 'comment' => $comment['body'], 'uid' => $comment['uid'])));
      $html_comment .='</div>';


      $data = array('html' => $html_comment, 'nid' => $comment['nid']);
      print "data: " . drupal_json_encode($data) . PHP_EOL;
      print PHP_EOL;
    }
  }

  ob_flush();
  flush();
  drupal_exit();

}

/**
 * Create new comment.
 */
function sse_comments_create_comment($nid, $comment_body, $pid = 0) {
  global $user;
  $comment = new stdClass();
  $comment->nid = $nid;
  $comment->cid = 0;
  $comment->pid = $pid;
  $comment->uid = $user->uid;
  $comment->mail = $user->mail;
  //$comment->name = '';
  //$comment->created = time();
  $comment->is_anonymous = 0;
  $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
  $comment->language = LANGUAGE_NONE; // The same as for a node
  $comment->subject = '';
  $comment->comment_body[$comment->language][0]['value'] = $comment_body;
  $comment->comment_body[$comment->language][0]['format'] = 'filtered_html';
  //$comment->field_custom_field_name[LANGUAGE_NONE][0]['value'] = ‘Some value’; //
  comment_submit($comment);
  comment_save($comment);
}


/**
 * Form for add comment to the post.
 */
function sse_comments_form($form, &$form_state, $vals = array()) {
  $form = array();
  $form['#attributes']['id'] = 'sse_comments_form_' . user_password();
  $form['#action'] = url('<front>');
  $form['nid'] = array('#type' => 'value', '#value' => $vals['nid']);
  $form['comment_body'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'id' => 'comment_body_' . user_password(),
    ),
    '#required' => TRUE,
  );
  $form['add_comment'] = array(
    '#type' => 'submit',
    '#value' => t('Коментувати'),
    '#prefix' => '<div class="add_comment add_comment_' . $vals['nid'] . '">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('use-ajax-submit')),

  );

  $form['#submit'][] = 'sse_comments_form_add_comment';
  return $form;
}

/**
 * Submit function for add comments.
 * @param $form
 * @param $form_state
 */
function sse_comments_form_add_comment($form, &$form_state) { //http://habrahabr.ru/post/147262/
  $form_state['rebuild'] = true;
  $nid = $form_state['values']['nid'];
  $comment_body = $form_state['values']['comment_body'];
  sse_comments_create_comment($nid, $comment_body);
  ajax_deliver(array('#type' => 'ajax', '#commands' => array()));
  drupal_exit();
}

function sse_comments_form_callback($form, &$form_state) {

}

/**
 * Implements hook_forms().
 * @param $form_id
 * @param $args
 * @return mixed
 */
function sse_comments_forms($form_id, $args) {
  $id = $args[0]['nid'];
  $forms['sse_comments_form_' . $id] = array(
    'callback' => 'sse_comments_form',
  );
  return $forms;
}